#!/usr/bin/env ruby
$: << File.expand_path('../../lib', __FILE__)
require 'batchy'
require 'json'
operation = ARGV.shift
queue_name = ARGV.shift
client = Aws::Batch::Client.new
batchy = Batchy.new(client)

case operation
when 'list'
  batchy.job_summaries(queue_name, *ARGV) do |j|
    puts j.to_h.to_json
  end
when 'detailed_list'
  batchy.jobs(queue_name, *ARGV) do |j|
    puts j.to_h.to_json
  end
when 'retry'
  jobs = client.describe_jobs(jobs: ARGV).jobs
  jobs.each do |j|
    config = {
      job_queue: queue_name,
      job_name: j.job_name,
      job_definition: j.job_definition.gsub(/:\d+$/, ''),
      container_overrides: {
        command: j.container.command,
      }
    }
    p client.submit_job(config)
  end
when 'cancel'
  reason = ARGV.shift
  ARGV.each do |job_id|
    p [job_id, client.cancel_job({
      job_id: job_id,
      reason: reason
    })]
  end
when 'terminate'
  reason = ARGV.shift
  ARGV.each do |job_id|
    p [job_id, client.terminate_job({
      job_id: job_id,
      reason: reason
    })]
  end
when 'stats'
  result = batchy.job_summaries(queue_name, *ARGV).each_with_object(Hash.new(0)) {|j, acc| acc[j.status] += 1 }
  puts JSON.pretty_generate(result)
else
  raise "No such operation #{operation.inspect}"
end
